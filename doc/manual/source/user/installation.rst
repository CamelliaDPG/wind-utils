Introduction
############

This section provides a general overview of NaluWindUtils and describes features
common to all utilities available within this package.

.. _user_installation:

Installing NaluWindUtils
========================

NaluWindUtils is written using C++ and Fortran and depends on several packages
for compilation. Every effort is made to keep the list of third party libraries
(TPLs) similar to the Nalu dependencies. Therefore, users who have successfully
built `Nalu <http://nalu.readthedocs.io/>`_ on their systems should be able to
build NaluWindUtils without any additional software. The main dependencies are
listed below:

#. Operating system --- NaluWindUtils has been tested on Linux and Mac OS X
   operating systems.

#. ``C++`` compiler --- Like Nalu, this software package requires a recent
   version of the ``C++`` compiler that supports the C++11 standard. The build
   system has been tested with GNU GCC, LLVM/Clang, and Intel suite of
   compilers.

#. `Trilinos Project <https://github.com/trilinos/Trilinos>`_ --- Particularly
   the Sierra ToolKit (STK) and Seacas packages for interacting with `Exodus-II
   <http://prod.sandia.gov/techlib/access-control.cgi/1992/922137.pdf>`_ mesh
   and solution database formats used by Nalu.

#. `YAML C++ <https://github.com/jbeder/yaml-cpp>`_ -- YAML C++ parsing library
   to process input files.

Users are strongly encouraged to use the `Spack <https://spack.io>`_ package
manager to fetch and install Trilinos along with all its dependencies. Spack
greatly simplifies the process of fetching, configuring, and installing packages
without the frustrating guesswork. Users unfamiliar with Spack are referred to
the `installation section
<http://nalu.readthedocs.io/en/latest/source/build_spack.html>`_ in the official
Nalu documentation that describes the steps necessary to install Trilinos using
Spack. Users unable to use Spack for whatever reason are referred to `Nalu manual
<http://nalu.readthedocs.io/en/latest/source/build_manually.html>`_ that details
steps necessary to install all the necessary dependencies for Nalu without using Spack.

While not a direct build dependency for NaluWindUtils, the users might want to
have `Paraview <http://www.paraview.org>`_ or `VisIt <https://visit.llnl.gov/>`_
installed to visualize the outputs generated by this package.

Compiling from Source
---------------------

#. If you are on an HPC system that provides Modules Environment, load the
   necessary compiler modules as well as any other package modules that are
   necessary for Trilinos.

#. Clone the latest release of NaluWindUtils from the git repository.

   .. code-block:: bash

      cd ${HOME}/nalu/
      git clone https://github.com/NaluCFD/NaluWindUtils.git
      cd NaluWindUtils

      # Create a build directory
      mkdir build
      cd build

#. Run CMake configure. The :file:`examples` directory provides two sample
   configuration scripts for spack and non-spack builds. Copy the appropriate
   script into the :file:`build` directory and edit as necessary for your
   particular system. In particular, the users will want to update the paths to
   the various software libraries that CMake will search for during the
   configuration process. Please see :ref:`cmake_conf_opts` for information
   regarding the different options available.

   The code snippet below shows the steps with the Spack configuration script,
   replace the file name :file:`doConfigSpack.sh` with :file:`doconfig.sh` for a
   non-spack environment.

   .. code-block:: bash

      # Ensure that `build` is the working directory
      cp ../examples/doConfigSpack.sh .
      # Edit the script with the correct paths, versions, etc.

      # Run CMake configure
      ./doConfigSpack.sh -DCMAKE_INSTALL_PREFIX=${HOME}/nalu/install/

#. Run `make` to build and install the executables.

   .. code-block:: bash

      make         # Use -j N if you want to build in parallel
      make install # Install the software to a common location

#. Test installation

   .. code-block:: bash

      bash$ ${HOME}/nalu/install/bin/nalu_preprocess -h
      Nalu preprocessor utility. Valid options are:
        -h [ --help ]                         Show this help message
        -i [ --input-file ] arg (=nalu_preprocess.yaml)
                                              Input file with preprocessor options

If you see the *help message* as shown above, then proceed to
:ref:`user_general_usage` section to learn how to use the compiled executables.
If you see errors during either the CMake or the build phase, please capture
*verbose* outputs from both steps and submit an issue on Github.

.. note::

   #. The WRF to Nalu inflow conversion utility is not built by default. Users
      must explicitly enable compilation of this utility using the
      :cmakeval:`ENABLE_WRFTONALU` flag. The default behavior is chose to
      eliminate the extra depenency on NetCDF-Fortran package required build
      this utility. The :file:`examples/doConfigSpack.sh` provides an example of
      how to build the this utility if desired.

   #. See :ref:`sphinx_doc_build` for instructions on building a local copy of
      this user manual as well as API documentation generated using Doxygen.

   #. Run ``make help`` to see all available targets that CMake understands to
      quickly build only the executable you are looking for.

.. _sphinx_doc_build:

Building Documentation
----------------------

Official documentation is available online on `ReadTheDocs site
<http://naluwindutils.readthedocs.io/>`_. However, users can generate their own
copy of the documentation using the RestructuredText files available within the
:file:`docs` directory. NaluWindUtils uses the `Sphinx
<http://www.sphinx-doc.org/en/stable/>`_ documentation generation package to
generate HTML or PDF files from the ``rst`` files. Therefore, the documentation
building process will require Python and Sphinx packages to be installed on your
system.

The easiest way to get Sphinx and all its dependencies is to install the
`Anaconda Python Distribution <https://www.anaconda.com/download/>`_ for the
operating system of your choice. Expert users can use `Miniconda
<https://conda.io/miniconda.html>`_ to install basic packages and install
additional packages like Sphinx manually within a *conda environment*.

Doc Generation Using CMake
~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Enable documentation genration via CMake by turning on the
   :cmakeval:`ENABLE_SPHINX_DOCS` flag.

#. Run ``make docs`` to generate the generate the documentation in HTML form.

#. Run ``make sphinx-pdf`` to generate the documentation using ``latexpdf``. Note:
   requires Latex packages installed in your system.

The resulting documentation will be available in :file:`doc/manual/html` and
:file:`doc/manual/latex` directories respectively for HTML and PDF builds within
the CMake build directory. See also :ref:`dev_docs_build`.

Doc Generation Without CMake
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since CMake will require users to have Trilinos installed, an alternate path is
provided to bypass CMake and generate documentation using ``Makefile`` on
Linux/OS X systems and ``make.bat`` file on Windows systems provided in the
:file:`docs/manual` directory.

.. code-block:: bash

   cd docs/manual
   # To generate HTML documentation
   make html
   open build/html/index.html

   # To generate PDF documentation
   make latexpdf
   open build/latex/NaluWindUtils.pdf

   # To generate help message
   make help


.. note::

   Users can also use ``pipenv`` or ``virtualenv`` as documented `here
   <http://docs.python-guide.org/en/latest/dev/virtualenvs/#pipenv-virtual-environments>`_
   to manage their python packages without Anaconda.


.. _cmake_conf_opts:

CMake Configuration Options
---------------------------

Users can use the following variables to control the CMake behavior during
configuration phase. These variables can be added directly to the configuration
script or passed as arguments to the script via command line as shown in the
previous section.

.. cmakeval:: CMAKE_INSTALL_PREFIX

   The directory where the compiled executables and libraries as well as headers
   are installed. For example, passing
   ``-DCMAKE_INSTALL_PREFIX=${HOME}/software`` will install the executables in
   ``${HOME}/software/bin`` when the user executes the ``make install`` command.

.. cmakeval:: CMAKE_BUILD_TYPE

   Controls the optimization levels for compilation. This variable can take the
   following values:

     ===============  =======================
     Value            Typical flags
     ===============  =======================
     RELEASE          ``-O2 -DNDEBUG``
     DEBUG            ``-g``
     RelWithDebInfo   ``-O2 -g``
     ===============  =======================

   Example: ``-DCMAKE_BUILD_TYPE:STRING=RELEASE``

.. cmakeval:: Trilinos_DIR

   Absolute path to the directory where Trilinos is installed.

.. cmakeval:: YAML_ROOT

   Absolute path to the directory where the YAML C++ library is installed.

.. cmakeval:: ENABLE_WRFTONALU

   A boolean flag indicating whether the WRF to Nalu conversion utility is to be
   built along with the C++ utilities. By default, this utility is not built as
   it requires the NetCDF-Fortran library support that is not part of the
   standard Nalu build dependency. Users wishing to enable this library must
   make sure that the NetCDF-Fortran library has been installed and configure
   the :cmakeval:`NETCDF_F77_ROOT` appropriately.

.. cmakeval:: NETCDF_F77_ROOT

   Absolute path to the location of the NETCDF Fortran 77 library.

.. cmakeval:: ENABLE_SPHINX_DOCS

   Boolean flag to enable building Sphinx-based documentation via CMake. Default: OFF.

.. cmakeval:: ENABLE_DOXYGEN_DOCS

   Boolean flag to enable extract source code documentation using Doxygen. Default: OFF.

Further fine-grained control of the build environment can be achieved by using
standard CMake flags, please see `CMake documentation
<https://cmake.org/cmake/help/v3.9/>`_ for details regarding these variables.

.. cmakeval:: CMAKE_VERBOSE_MAKEFILE

   A boolean flag indicating whether the build process should output verbose
   commands when compiling the files. By default, this flag is ``OFF`` and
   ``make`` only shows the file being processed. Turn this flag ``ON`` if you
   want to see the exact command issued when compiling the source code.
   Alternately, users can also invoke this flag during the ``make`` invocation
   as shown below:

   .. code-block:: bash

      bash$ make VERBOSE=1

.. cmakeval:: CMAKE_CXX_COMPILER

   Set the C++ compiler used for compiling the code

.. cmakeval:: CMAKE_C_COMPILER

   Set the C compiler used for compiling the code

.. cmakeval:: CMAKE_Fortran_COMPILER

   Set the Fortran compiler used for compiling the code

.. cmakeval:: CMAKE_CXX_FLAGS

   Additional flags to be passed to the C++ compiler during compilation. For
   example, to enable OpenMP support during compilation pass
   ``-DCMAKE_CXX_FLAGS=" -fopenmp"`` when using the GNU GCC compiler.

.. cmakeval:: CMAKE_C_FLAGS

   Additional flags to be passed to the C compiler during compilation.

.. cmakeval:: CMAKE_Fortran_FLAGS

   Additional flags to be passed to the Fortran compiler during compilation.


.. _user_general_usage:

General Usage
=============

Most utilities require a YAML input file containing all the information
necessary to run the utility. The executables have been configured to look for a
default input file name within the run directory, this default filename can be
overridden by providing a custom filename using the ``-i`` option flag. Users
can use the ``-h`` or the ``--help`` flag with any executable to look at various
command line options available as well as the name of the default input file as
shown in the following example:

.. code-block:: bash

   bash$ src/preprocessing/nalu_preprocess -h
   Nalu preprocessor utility. Valid options are:
     -h [ --help ]                         Show this help message
     -i [ --input-file ] arg (=nalu_preprocess.yaml)
                                           Input file with preprocessor options

The output above shows the default input file name as
:file:`nalu_preprocess.yaml` for the :program:`nalu_preprocess` utility.

.. note::

   It is assumed that the :file:`bin` directory where the utilities were
   installed are accessible via the user's :envvar:`PATH` variable. Please refer
   to :ref:`user_installation` for more details.
